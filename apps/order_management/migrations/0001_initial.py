# Generated by Django 5.2.4 on 2025-07-16 12:42

import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("trading_simulation", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="MatchingEngine",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "matching_algorithm",
                    models.CharField(
                        choices=[
                            ("FIFO", "First In First Out"),
                            ("PRO_RATA", "Pro Rata"),
                            ("PRICE_TIME", "Price Time Priority"),
                            ("SIZE_PRIORITY", "Size Priority"),
                        ],
                        default="PRICE_TIME",
                        max_length=50,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("last_match_timestamp", models.DateTimeField(blank=True, null=True)),
                ("orders_processed", models.BigIntegerField(default=0)),
                ("trades_executed", models.BigIntegerField(default=0)),
                (
                    "average_latency_ms",
                    models.DecimalField(
                        decimal_places=3, default=Decimal("0.000"), max_digits=10
                    ),
                ),
                (
                    "exchange",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="matching_engine",
                        to="trading_simulation.simulatedexchange",
                    ),
                ),
            ],
            options={
                "db_table": "simulation_matching_engines",
            },
        ),
        migrations.CreateModel(
            name="OrderBook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "best_bid_price",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=15, null=True
                    ),
                ),
                ("best_bid_quantity", models.PositiveIntegerField(default=0)),
                (
                    "best_ask_price",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=15, null=True
                    ),
                ),
                ("best_ask_quantity", models.PositiveIntegerField(default=0)),
                (
                    "last_trade_price",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=15, null=True
                    ),
                ),
                ("last_trade_quantity", models.PositiveIntegerField(default=0)),
                ("last_trade_timestamp", models.DateTimeField(blank=True, null=True)),
                ("daily_volume", models.BigIntegerField(default=0)),
                (
                    "daily_turnover",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=20
                    ),
                ),
                ("trade_count", models.PositiveIntegerField(default=0)),
                (
                    "daily_high",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=15, null=True
                    ),
                ),
                (
                    "daily_low",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=15, null=True
                    ),
                ),
                (
                    "opening_price",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=15, null=True
                    ),
                ),
                (
                    "instrument",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="order_book",
                        to="trading_simulation.simulatedinstrument",
                    ),
                ),
            ],
            options={
                "db_table": "simulation_order_books",
            },
        ),
        migrations.CreateModel(
            name="SimulatedOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "order_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("client_order_id", models.CharField(blank=True, max_length=50)),
                (
                    "side",
                    models.CharField(
                        choices=[("BUY", "Buy"), ("SELL", "Sell")], max_length=10
                    ),
                ),
                (
                    "order_type",
                    models.CharField(
                        choices=[
                            ("MARKET", "Market Order"),
                            ("LIMIT", "Limit Order"),
                            ("STOP", "Stop Order"),
                            ("STOP_LIMIT", "Stop Limit Order"),
                            ("IOC", "Immediate or Cancel"),
                            ("FOK", "Fill or Kill"),
                            ("ICEBERG", "Iceberg Order"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(help_text="Number of shares/units"),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Limit price (null for market orders)",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "stop_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Stop price for stop orders",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "time_in_force",
                    models.CharField(
                        choices=[
                            ("GTC", "Good Till Cancelled"),
                            ("DAY", "Day Order"),
                            ("IOC", "Immediate or Cancel"),
                            ("FOK", "Fill or Kill"),
                        ],
                        default="GTC",
                        max_length=10,
                    ),
                ),
                (
                    "display_quantity",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Quantity to display publicly (for iceberg orders)",
                        null=True,
                    ),
                ),
                (
                    "minimum_quantity",
                    models.PositiveIntegerField(
                        blank=True, help_text="Minimum fill quantity", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("SUBMITTED", "Submitted"),
                            ("ACKNOWLEDGED", "Acknowledged"),
                            ("PARTIALLY_FILLED", "Partially Filled"),
                            ("FILLED", "Filled"),
                            ("CANCELLED", "Cancelled"),
                            ("REJECTED", "Rejected"),
                            ("EXPIRED", "Expired"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("filled_quantity", models.PositiveIntegerField(default=0)),
                ("remaining_quantity", models.PositiveIntegerField(default=0)),
                (
                    "average_fill_price",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=15, null=True
                    ),
                ),
                ("order_timestamp", models.DateTimeField(auto_now_add=True)),
                ("submission_timestamp", models.DateTimeField(blank=True, null=True)),
                (
                    "acknowledgment_timestamp",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("first_fill_timestamp", models.DateTimeField(blank=True, null=True)),
                ("last_fill_timestamp", models.DateTimeField(blank=True, null=True)),
                ("completion_timestamp", models.DateTimeField(blank=True, null=True)),
                (
                    "total_fees",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "total_commission",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                ("risk_checked", models.BooleanField(default=False)),
                ("compliance_checked", models.BooleanField(default=False)),
                ("rejection_reason", models.TextField(blank=True)),
                (
                    "exchange",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="orders",
                        to="trading_simulation.simulatedexchange",
                    ),
                ),
                (
                    "instrument",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="orders",
                        to="trading_simulation.simulatedinstrument",
                    ),
                ),
                (
                    "parent_order",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_orders",
                        to="order_management.simulatedorder",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="simulated_orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "simulation_orders",
                "ordering": ["-order_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="SimulatedTrade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "trade_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("quantity", models.PositiveIntegerField()),
                ("price", models.DecimalField(decimal_places=6, max_digits=15)),
                ("trade_timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "notional_value",
                    models.DecimalField(decimal_places=2, max_digits=20),
                ),
                (
                    "buyer_fees",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "seller_fees",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "is_aggressive",
                    models.BooleanField(
                        default=False,
                        help_text="True if this trade removed liquidity (market order)",
                    ),
                ),
                (
                    "buy_order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="buy_trades",
                        to="order_management.simulatedorder",
                    ),
                ),
                (
                    "exchange",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trades",
                        to="trading_simulation.simulatedexchange",
                    ),
                ),
                (
                    "instrument",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trades",
                        to="trading_simulation.simulatedinstrument",
                    ),
                ),
                (
                    "sell_order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sell_trades",
                        to="order_management.simulatedorder",
                    ),
                ),
            ],
            options={
                "db_table": "simulation_trades",
                "ordering": ["-trade_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Fill",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "fill_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("quantity", models.PositiveIntegerField()),
                ("price", models.DecimalField(decimal_places=6, max_digits=15)),
                ("fill_timestamp", models.DateTimeField(auto_now_add=True)),
                ("gross_amount", models.DecimalField(decimal_places=2, max_digits=20)),
                (
                    "fees",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                ("net_amount", models.DecimalField(decimal_places=2, max_digits=20)),
                ("is_aggressive", models.BooleanField(default=False)),
                (
                    "liquidity_flag",
                    models.CharField(
                        choices=[
                            ("MAKER", "Liquidity Maker"),
                            ("TAKER", "Liquidity Taker"),
                        ],
                        default="TAKER",
                        max_length=10,
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fills",
                        to="order_management.simulatedorder",
                    ),
                ),
                (
                    "trade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fills",
                        to="order_management.simulatedtrade",
                    ),
                ),
            ],
            options={
                "db_table": "simulation_fills",
                "ordering": ["-fill_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="OrderBookLevel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "side",
                    models.CharField(
                        choices=[("BUY", "Buy"), ("SELL", "Sell")], max_length=10
                    ),
                ),
                ("price", models.DecimalField(decimal_places=6, max_digits=15)),
                ("quantity", models.PositiveIntegerField()),
                ("order_count", models.PositiveIntegerField(default=1)),
                (
                    "order_book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="levels",
                        to="order_management.orderbook",
                    ),
                ),
            ],
            options={
                "db_table": "simulation_order_book_levels",
                "ordering": ["side", "-price"],
                "unique_together": {("order_book", "side", "price")},
            },
        ),
        migrations.AddIndex(
            model_name="simulatedorder",
            index=models.Index(
                fields=["user", "status"], name="simulation__user_id_8472bb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="simulatedorder",
            index=models.Index(
                fields=["instrument", "side", "status"],
                name="simulation__instrum_6d9410_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="simulatedorder",
            index=models.Index(
                fields=["order_timestamp"], name="simulation__order_t_a3ae5a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="simulatedtrade",
            index=models.Index(
                fields=["instrument", "trade_timestamp"],
                name="simulation__instrum_71ec07_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="simulatedtrade",
            index=models.Index(
                fields=["trade_timestamp"], name="simulation__trade_t_75074b_idx"
            ),
        ),
    ]
