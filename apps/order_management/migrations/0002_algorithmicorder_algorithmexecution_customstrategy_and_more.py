# Generated by Django 5.2.4 on 2025-07-16 18:47

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("order_management", "0001_initial"),
        ("trading_simulation", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AlgorithmicOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "algo_order_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("client_algo_id", models.CharField(blank=True, max_length=50)),
                (
                    "algorithm_type",
                    models.CharField(
                        choices=[
                            ("TWAP", "Time-Weighted Average Price"),
                            ("VWAP", "Volume-Weighted Average Price"),
                            ("IS", "Implementation Shortfall"),
                            ("ICEBERG", "Iceberg Order"),
                            ("SNIPER", "Sniper Algorithm"),
                            ("POV", "Percentage of Volume"),
                            ("CUSTOM", "Custom Strategy"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "side",
                    models.CharField(
                        choices=[("BUY", "Buy"), ("SELL", "Sell")], max_length=10
                    ),
                ),
                (
                    "total_quantity",
                    models.PositiveIntegerField(help_text="Total shares to trade"),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                (
                    "algorithm_parameters",
                    models.JSONField(
                        default=dict,
                        help_text="Algorithm-specific configuration parameters",
                    ),
                ),
                (
                    "min_slice_size",
                    models.PositiveIntegerField(
                        default=100, help_text="Minimum size for child orders"
                    ),
                ),
                (
                    "max_slice_size",
                    models.PositiveIntegerField(
                        blank=True, help_text="Maximum size for child orders", null=True
                    ),
                ),
                (
                    "participation_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Maximum participation rate (0.0001-1.0)",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0001),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "limit_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Hard limit price",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "price_tolerance",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Price tolerance as percentage",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("RUNNING", "Running"),
                            ("PAUSED", "Paused"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("executed_quantity", models.PositiveIntegerField(default=0)),
                ("remaining_quantity", models.PositiveIntegerField(default=0)),
                (
                    "average_execution_price",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=15, null=True
                    ),
                ),
                (
                    "total_slippage",
                    models.DecimalField(
                        decimal_places=6, default=Decimal("0.000000"), max_digits=15
                    ),
                ),
                (
                    "implementation_shortfall",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=15, null=True
                    ),
                ),
                ("created_timestamp", models.DateTimeField(auto_now_add=True)),
                ("started_timestamp", models.DateTimeField(blank=True, null=True)),
                ("completed_timestamp", models.DateTimeField(blank=True, null=True)),
                (
                    "exchange",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="algo_orders",
                        to="trading_simulation.simulatedexchange",
                    ),
                ),
                (
                    "instrument",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="algo_orders",
                        to="trading_simulation.simulatedinstrument",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="algorithmic_orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "simulation_algorithmic_orders",
                "ordering": ["-created_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="AlgorithmExecution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "execution_step",
                    models.PositiveIntegerField(help_text="Step number in algorithm"),
                ),
                ("market_price", models.DecimalField(decimal_places=6, max_digits=15)),
                ("market_volume", models.PositiveIntegerField(default=0)),
                (
                    "spread_bps",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=8
                    ),
                ),
                ("executed_quantity", models.PositiveIntegerField(default=0)),
                (
                    "execution_price",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=15, null=True
                    ),
                ),
                (
                    "slippage_bps",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=8
                    ),
                ),
                ("scheduled_time", models.DateTimeField()),
                ("execution_time", models.DateTimeField(blank=True, null=True)),
                (
                    "child_order",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="algorithm_executions",
                        to="order_management.simulatedorder",
                    ),
                ),
                (
                    "algo_order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="executions",
                        to="order_management.algorithmicorder",
                    ),
                ),
            ],
            options={
                "db_table": "simulation_algorithm_executions",
                "ordering": ["execution_step"],
            },
        ),
        migrations.CreateModel(
            name="CustomStrategy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "strategy_code",
                    models.TextField(
                        help_text="Python code defining the strategy logic"
                    ),
                ),
                (
                    "strategy_parameters",
                    models.JSONField(
                        default=dict, help_text="Configurable strategy parameters"
                    ),
                ),
                (
                    "max_position_size",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("10000.00"), max_digits=15
                    ),
                ),
                (
                    "max_daily_loss",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("1000.00"), max_digits=15
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_validated", models.BooleanField(default=False)),
                ("total_executions", models.PositiveIntegerField(default=0)),
                (
                    "total_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "win_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Win rate as percentage",
                        max_digits=5,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="custom_strategies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "simulation_custom_strategies",
            },
        ),
        migrations.CreateModel(
            name="StrategyBacktest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                (
                    "initial_capital",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("100000.00"), max_digits=15
                    ),
                ),
                (
                    "instruments_tested",
                    models.JSONField(
                        default=list,
                        help_text="List of instruments included in backtest",
                    ),
                ),
                (
                    "final_capital",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "total_return",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Total return as percentage",
                        max_digits=8,
                    ),
                ),
                (
                    "annual_return",
                    models.DecimalField(
                        decimal_places=4, default=Decimal("0.0000"), max_digits=8
                    ),
                ),
                (
                    "sharpe_ratio",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=8, null=True
                    ),
                ),
                (
                    "max_drawdown",
                    models.DecimalField(
                        decimal_places=4, default=Decimal("0.0000"), max_digits=8
                    ),
                ),
                ("total_trades", models.PositiveIntegerField(default=0)),
                ("winning_trades", models.PositiveIntegerField(default=0)),
                ("losing_trades", models.PositiveIntegerField(default=0)),
                (
                    "average_trade_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "backtest_results",
                    models.JSONField(
                        default=dict,
                        help_text="Detailed backtest results and trade log",
                    ),
                ),
                (
                    "strategy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="backtests",
                        to="order_management.customstrategy",
                    ),
                ),
            ],
            options={
                "db_table": "simulation_strategy_backtests",
                "ordering": ["-start_date"],
            },
        ),
        migrations.AddIndex(
            model_name="algorithmicorder",
            index=models.Index(
                fields=["user", "status"], name="simulation__user_id_6d36ac_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="algorithmicorder",
            index=models.Index(
                fields=["algorithm_type", "status"],
                name="simulation__algorit_1967c1_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="algorithmicorder",
            index=models.Index(
                fields=["start_time", "end_time"], name="simulation__start_t_c7eff5_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="customstrategy",
            unique_together={("user", "name")},
        ),
    ]
