# Generated by Django 5.2.4 on 2025-07-16 12:43

import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        (
            "market_data",
            "0002_dataingestionlog_exchange_fundamentaldata_industry_and_more",
        ),
        ("trading_simulation", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ComplianceRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("applies_to_all_users", models.BooleanField(default=True)),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("ORDER_SIZE", "Order Size Check"),
                            ("POSITION_LIMIT", "Position Limit Check"),
                            ("WASH_SALE", "Wash Sale Prevention"),
                            ("PATTERN_DAY_TRADER", "Pattern Day Trader Check"),
                            ("CONCENTRATION", "Concentration Check"),
                            ("CUSTOM", "Custom Rule"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(
                        default=dict, help_text="Rule-specific parameters as JSON"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "enforcement_action",
                    models.CharField(
                        choices=[
                            ("WARN", "Warning Only"),
                            ("BLOCK", "Block Order"),
                            ("REQUIRE_APPROVAL", "Require Approval"),
                        ],
                        default="WARN",
                        max_length=20,
                    ),
                ),
                (
                    "specific_users",
                    models.ManyToManyField(
                        blank=True,
                        related_name="compliance_rules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "simulation_compliance_rules",
            },
        ),
        migrations.CreateModel(
            name="ComplianceCheck",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("order_id", models.UUIDField(blank=True, null=True)),
                ("check_timestamp", models.DateTimeField(auto_now_add=True)),
                ("passed", models.BooleanField()),
                ("violation_message", models.TextField(blank=True)),
                (
                    "checked_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "limit_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="compliance_checks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="checks",
                        to="risk_management.compliancerule",
                    ),
                ),
            ],
            options={
                "db_table": "simulation_compliance_checks",
                "ordering": ["-check_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="PositionLimit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "limit_type",
                    models.CharField(
                        choices=[
                            ("POSITION_SIZE", "Position Size Limit"),
                            ("CONCENTRATION", "Concentration Limit"),
                            ("SECTOR_EXPOSURE", "Sector Exposure Limit"),
                            ("DAILY_LOSS", "Daily Loss Limit"),
                            ("PORTFOLIO_VAR", "Portfolio VaR Limit"),
                            ("LEVERAGE", "Leverage Limit"),
                            ("ORDER_SIZE", "Order Size Limit"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "max_position_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum position value in base currency",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "max_position_quantity",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum position quantity (shares/units)",
                        null=True,
                    ),
                ),
                (
                    "max_percentage_of_portfolio",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum percentage of total portfolio value",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "max_daily_loss",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum daily loss allowed",
                        max_digits=15,
                        null=True,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "warning_threshold_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("80.00"),
                        help_text="Percentage of limit at which to warn",
                        max_digits=5,
                    ),
                ),
                (
                    "exchange",
                    models.ForeignKey(
                        blank=True,
                        help_text="Exchange-level limit",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="trading_simulation.simulatedexchange",
                    ),
                ),
                (
                    "instrument",
                    models.ForeignKey(
                        blank=True,
                        help_text="Specific instrument (null for global limits)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="trading_simulation.simulatedinstrument",
                    ),
                ),
                (
                    "sector",
                    models.ForeignKey(
                        blank=True,
                        help_text="Sector-level limit",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="market_data.sector",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="position_limits",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "simulation_position_limits",
                "unique_together": {
                    ("user", "limit_type", "exchange"),
                    ("user", "limit_type", "instrument"),
                    ("user", "limit_type", "sector"),
                },
            },
        ),
        migrations.CreateModel(
            name="RiskAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("alert_type", models.CharField(max_length=50)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("NORMAL", "Normal"),
                            ("WARNING", "Warning"),
                            ("BREACH", "Breach"),
                            ("CRITICAL", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                ("message", models.TextField()),
                ("is_acknowledged", models.BooleanField(default=False)),
                ("acknowledged_at", models.DateTimeField(blank=True, null=True)),
                ("is_resolved", models.BooleanField(default=False)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "current_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "limit_value",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "breach_percentage",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="trading_simulation.simulatedposition",
                    ),
                ),
                (
                    "position_limit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="risk_management.positionlimit",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "simulation_risk_alerts",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MarginRequirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "initial_margin_rate",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.5000"),
                        help_text="Initial margin requirement as decimal (0.50 = 50%)",
                        max_digits=5,
                    ),
                ),
                (
                    "maintenance_margin_rate",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.2500"),
                        help_text="Maintenance margin requirement as decimal",
                        max_digits=5,
                    ),
                ),
                (
                    "current_position_value",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "required_initial_margin",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "required_maintenance_margin",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                ("is_hard_to_borrow", models.BooleanField(default=False)),
                (
                    "borrow_fee_rate",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0000"),
                        help_text="Annual borrow fee rate for short positions",
                        max_digits=6,
                    ),
                ),
                (
                    "instrument",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="margin_requirements",
                        to="trading_simulation.simulatedinstrument",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="margin_requirements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "simulation_margin_requirements",
                "unique_together": {("user", "instrument")},
            },
        ),
        migrations.CreateModel(
            name="PortfolioRisk",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("calculation_date", models.DateField()),
                (
                    "total_portfolio_value",
                    models.DecimalField(decimal_places=2, max_digits=20),
                ),
                ("cash_balance", models.DecimalField(decimal_places=2, max_digits=15)),
                (
                    "long_market_value",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "short_market_value",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "portfolio_var_1d",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Portfolio VaR (1-day, 95% confidence)",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "portfolio_beta",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Portfolio beta vs market",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "portfolio_volatility",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Portfolio volatility (annualized)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "max_position_weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Largest position as % of portfolio",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "top_5_concentration",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Top 5 positions as % of portfolio",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "sector_concentration",
                    models.JSONField(
                        default=dict, help_text="Sector concentration percentages"
                    ),
                ),
                (
                    "gross_leverage",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("1.0000"),
                        help_text="Gross leverage ratio",
                        max_digits=8,
                    ),
                ),
                (
                    "net_leverage",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("1.0000"),
                        help_text="Net leverage ratio",
                        max_digits=8,
                    ),
                ),
                (
                    "daily_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "mtd_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "ytd_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "risk_status",
                    models.CharField(
                        choices=[
                            ("NORMAL", "Normal"),
                            ("WARNING", "Warning"),
                            ("BREACH", "Breach"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="NORMAL",
                        max_length=20,
                    ),
                ),
                ("active_alerts_count", models.PositiveIntegerField(default=0)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="portfolio_risks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "simulation_portfolio_risks",
                "ordering": ["-calculation_date"],
                "unique_together": {("user", "calculation_date")},
            },
        ),
    ]
