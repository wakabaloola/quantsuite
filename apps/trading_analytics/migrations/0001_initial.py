# Generated by Django 5.2.4 on 2025-07-16 12:43

import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        (
            "market_data",
            "0002_dataingestionlog_exchange_fundamentaldata_industry_and_more",
        ),
        ("order_management", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="TradeAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "trade_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SCALP", "Scalping"),
                            ("DAY_TRADE", "Day Trade"),
                            ("SWING", "Swing Trade"),
                            ("POSITION", "Position Trade"),
                            ("LONG_TERM", "Long Term Hold"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "market_trend",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("BULLISH", "Bullish"),
                            ("BEARISH", "Bearish"),
                            ("SIDEWAYS", "Sideways"),
                            ("VOLATILE", "Volatile"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("entry_price", models.DecimalField(decimal_places=6, max_digits=15)),
                ("exit_price", models.DecimalField(decimal_places=6, max_digits=15)),
                (
                    "price_change_percentage",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Price change during trade",
                        max_digits=8,
                    ),
                ),
                (
                    "volume_ratio",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Trade volume vs average volume",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "volatility_percentile",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Volatility percentile during trade",
                        max_digits=5,
                        null=True,
                    ),
                ),
                ("gross_pnl", models.DecimalField(decimal_places=2, max_digits=15)),
                ("net_pnl", models.DecimalField(decimal_places=2, max_digits=15)),
                (
                    "pnl_percentage",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="P&L as percentage of trade value",
                        max_digits=8,
                    ),
                ),
                (
                    "hold_duration_minutes",
                    models.PositiveIntegerField(
                        help_text="How long the position was held"
                    ),
                ),
                (
                    "time_to_first_profit_minutes",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "time_in_profit_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage of time trade was profitable",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "max_adverse_excursion",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum loss during trade",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "max_favorable_excursion",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum profit during trade",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "trade",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analysis",
                        to="order_management.simulatedtrade",
                    ),
                ),
            ],
            options={
                "db_table": "simulation_trade_analysis",
            },
        ),
        migrations.CreateModel(
            name="TradingPerformance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "period_type",
                    models.CharField(
                        choices=[
                            ("DAILY", "Daily"),
                            ("WEEKLY", "Weekly"),
                            ("MONTHLY", "Monthly"),
                            ("QUARTERLY", "Quarterly"),
                            ("YEARLY", "Yearly"),
                            ("INCEPTION", "Since Inception"),
                        ],
                        max_length=20,
                    ),
                ),
                ("period_start", models.DateTimeField()),
                ("period_end", models.DateTimeField()),
                (
                    "starting_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Portfolio value at period start",
                        max_digits=15,
                    ),
                ),
                (
                    "ending_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Portfolio value at period end",
                        max_digits=15,
                    ),
                ),
                (
                    "peak_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Highest portfolio value during period",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "trough_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Lowest portfolio value during period",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "total_return",
                    models.DecimalField(
                        decimal_places=8,
                        help_text="Total return as decimal (0.10 = 10%)",
                        max_digits=12,
                    ),
                ),
                (
                    "annualized_return",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        help_text="Annualized return",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "volatility",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Annualized volatility",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "sharpe_ratio",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Sharpe ratio (excess return / volatility)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "max_drawdown",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Maximum drawdown during period",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "max_drawdown_duration_days",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Duration of maximum drawdown in days",
                        null=True,
                    ),
                ),
                ("total_trades", models.PositiveIntegerField(default=0)),
                ("winning_trades", models.PositiveIntegerField(default=0)),
                ("losing_trades", models.PositiveIntegerField(default=0)),
                ("break_even_trades", models.PositiveIntegerField(default=0)),
                (
                    "realized_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "unrealized_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "total_fees",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                (
                    "gross_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "net_pnl",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=15
                    ),
                ),
                (
                    "average_win",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "average_loss",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "largest_win",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "largest_loss",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "profit_factor",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Gross profit / gross loss",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "calmar_ratio",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Annualized return / max drawdown",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "sortino_ratio",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Return / downside deviation",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trading_performance",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "simulation_trading_performance",
                "ordering": ["-period_end"],
                "unique_together": {("user", "period_type", "period_start")},
            },
        ),
        migrations.CreateModel(
            name="PerformanceAttribution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("attribution_date", models.DateField()),
                (
                    "attribution_period",
                    models.CharField(
                        choices=[
                            ("DAILY", "Daily"),
                            ("WEEKLY", "Weekly"),
                            ("MONTHLY", "Monthly"),
                            ("QUARTERLY", "Quarterly"),
                            ("YEARLY", "Yearly"),
                            ("INCEPTION", "Since Inception"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "total_portfolio_return",
                    models.DecimalField(decimal_places=8, max_digits=12),
                ),
                (
                    "benchmark_return",
                    models.DecimalField(decimal_places=8, max_digits=12),
                ),
                (
                    "active_return",
                    models.DecimalField(
                        decimal_places=8,
                        help_text="Portfolio return - benchmark return",
                        max_digits=12,
                    ),
                ),
                (
                    "asset_allocation_effect",
                    models.DecimalField(
                        decimal_places=8,
                        help_text="Return from asset allocation decisions",
                        max_digits=12,
                    ),
                ),
                (
                    "security_selection_effect",
                    models.DecimalField(
                        decimal_places=8,
                        help_text="Return from security selection",
                        max_digits=12,
                    ),
                ),
                (
                    "interaction_effect",
                    models.DecimalField(
                        decimal_places=8,
                        help_text="Interaction between allocation and selection",
                        max_digits=12,
                    ),
                ),
                (
                    "sector_attribution",
                    models.JSONField(default=dict, help_text="Attribution by sector"),
                ),
                (
                    "top_contributors",
                    models.JSONField(
                        default=list, help_text="Top contributing positions"
                    ),
                ),
                (
                    "top_detractors",
                    models.JSONField(
                        default=list, help_text="Top detracting positions"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="performance_attribution",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "simulation_performance_attribution",
                "ordering": ["-attribution_date"],
                "unique_together": {("user", "attribution_date", "attribution_period")},
            },
        ),
        migrations.CreateModel(
            name="PortfolioAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("analysis_date", models.DateField()),
                ("total_positions", models.PositiveIntegerField(default=0)),
                ("long_positions", models.PositiveIntegerField(default=0)),
                ("short_positions", models.PositiveIntegerField(default=0)),
                (
                    "cash_percentage",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=5
                    ),
                ),
                (
                    "sector_diversification",
                    models.JSONField(
                        default=dict, help_text="Sector allocation percentages"
                    ),
                ),
                (
                    "geographic_diversification",
                    models.JSONField(
                        default=dict, help_text="Geographic allocation percentages"
                    ),
                ),
                (
                    "market_cap_distribution",
                    models.JSONField(default=dict, help_text="Market cap distribution"),
                ),
                (
                    "portfolio_beta",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=8, null=True
                    ),
                ),
                (
                    "portfolio_correlation_sp500",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=6, null=True
                    ),
                ),
                (
                    "concentration_hhi",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Herfindahl-Hirschman Index for concentration",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "security_selection_return",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Return from security selection",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "sector_allocation_return",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Return from sector allocation",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "interaction_return",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Interaction effect",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "portfolio_turnover",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Portfolio turnover rate",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "average_holding_period_days",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="portfolio_analytics",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "simulation_portfolio_analytics",
                "ordering": ["-analysis_date"],
                "unique_together": {("user", "analysis_date")},
            },
        ),
        migrations.CreateModel(
            name="RiskReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("report_date", models.DateField()),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("DAILY", "Daily Risk Report"),
                            ("WEEKLY", "Weekly Risk Report"),
                            ("MONTHLY", "Monthly Risk Report"),
                            ("AD_HOC", "Ad Hoc Report"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "total_portfolio_value",
                    models.DecimalField(decimal_places=2, max_digits=20),
                ),
                ("number_of_positions", models.PositiveIntegerField()),
                ("position_limit_breaches", models.PositiveIntegerField(default=0)),
                (
                    "concentration_limit_breaches",
                    models.PositiveIntegerField(default=0),
                ),
                ("daily_loss_limit_breaches", models.PositiveIntegerField(default=0)),
                (
                    "portfolio_var_1d_95",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "portfolio_var_1d_99",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=15, null=True
                    ),
                ),
                (
                    "component_var",
                    models.JSONField(
                        default=dict, help_text="Component VaR by position"
                    ),
                ),
                (
                    "stress_test_results",
                    models.JSONField(
                        default=dict, help_text="Results from various stress scenarios"
                    ),
                ),
                ("risk_recommendations", models.TextField(blank=True)),
                (
                    "action_items",
                    models.JSONField(
                        default=list, help_text="Specific action items to address risks"
                    ),
                ),
                (
                    "calculation_time_seconds",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=8, null=True
                    ),
                ),
                (
                    "data_quality_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Data quality score (0-100)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "simulation_risk_reports",
                "ordering": ["-report_date"],
                "unique_together": {("user", "report_date", "report_type")},
            },
        ),
        migrations.CreateModel(
            name="StrategyPerformance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("strategy_name", models.CharField(max_length=100)),
                ("strategy_description", models.TextField(blank=True)),
                (
                    "strategy_type",
                    models.CharField(
                        choices=[
                            ("MOMENTUM", "Momentum"),
                            ("MEAN_REVERSION", "Mean Reversion"),
                            ("TREND_FOLLOWING", "Trend Following"),
                            ("ARBITRAGE", "Arbitrage"),
                            ("FUNDAMENTAL", "Fundamental Analysis"),
                            ("TECHNICAL", "Technical Analysis"),
                            ("QUANTITATIVE", "Quantitative"),
                            ("DISCRETIONARY", "Discretionary"),
                            ("CUSTOM", "Custom Strategy"),
                        ],
                        max_length=50,
                    ),
                ),
                ("inception_date", models.DateField()),
                ("last_updated", models.DateField()),
                ("total_return", models.DecimalField(decimal_places=8, max_digits=12)),
                (
                    "annualized_return",
                    models.DecimalField(
                        blank=True, decimal_places=8, max_digits=12, null=True
                    ),
                ),
                (
                    "volatility",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=8, null=True
                    ),
                ),
                (
                    "sharpe_ratio",
                    models.DecimalField(
                        blank=True, decimal_places=4, max_digits=8, null=True
                    ),
                ),
                (
                    "max_drawdown",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=8, null=True
                    ),
                ),
                ("total_trades", models.PositiveIntegerField(default=0)),
                ("winning_trades", models.PositiveIntegerField(default=0)),
                (
                    "average_trade_duration_hours",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "allocated_capital",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Capital allocated to this strategy",
                        max_digits=15,
                    ),
                ),
                (
                    "current_allocation_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Current percentage of total portfolio",
                        max_digits=5,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_paper_only",
                    models.BooleanField(
                        default=True, help_text="Strategy is simulation-only"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="strategy_performance",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "simulation_strategy_performance",
                "ordering": ["-total_return"],
                "unique_together": {("user", "strategy_name")},
            },
        ),
        migrations.CreateModel(
            name="BenchmarkComparison",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "benchmark_type",
                    models.CharField(
                        choices=[
                            ("SP500", "S&P 500"),
                            ("NASDAQ", "NASDAQ Composite"),
                            ("DOW", "Dow Jones Industrial Average"),
                            ("RUSSELL2000", "Russell 2000"),
                            ("CUSTOM", "Custom Benchmark"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "benchmark_return",
                    models.DecimalField(
                        decimal_places=8,
                        help_text="Benchmark return for the same period",
                        max_digits=12,
                    ),
                ),
                (
                    "benchmark_volatility",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=8, null=True
                    ),
                ),
                (
                    "excess_return",
                    models.DecimalField(
                        decimal_places=8,
                        help_text="Portfolio return - benchmark return",
                        max_digits=12,
                    ),
                ),
                (
                    "tracking_error",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Standard deviation of excess returns",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "information_ratio",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Excess return / tracking error",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "beta",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Portfolio beta vs benchmark",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "alpha",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        help_text="Jensen's alpha",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "correlation",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        help_text="Correlation with benchmark",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "benchmark_ticker",
                    models.ForeignKey(
                        blank=True,
                        help_text="Ticker for custom benchmark",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="market_data.ticker",
                    ),
                ),
                (
                    "performance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="benchmark_comparisons",
                        to="trading_analytics.tradingperformance",
                    ),
                ),
            ],
            options={
                "db_table": "simulation_benchmark_comparisons",
                "unique_together": {("performance", "benchmark_type")},
            },
        ),
    ]
